#summary Domain Driven Design - Business Developer mental model

<wiki:toc max_depth="3" />

= Technical introduction =

This document describes sample code illustrating DDD techniques. Intention is to present code form the perspective of the business model developer. So we focus on business developers' mental model without digging to deep into engine details.

Idea is that Business does not need to understand what's under the hood - he or she should rather focus on modeling and well crafted business code.

==Project Structure==

==Just one Maven Artifact?==

==Architecture and design visualization using "scalable map"==

=Domain Description= 
==Bounded Contexts - decoupling, independent development== 
==Shared Kernel== 
=Application Architecture= 
==Layers== 
==Inversion of Control techniques: Dependency Injection, Events, Aspect Oriented Programming== 
==Design expression using Custom Annotations==  
=Application Layer= 
==Commands/Services== 
==Listeners - Bounded Context and Context Mapper== 
==Sagas== 
=Domain Layer= 
==Entity - JPA aspects, Base class== 
==Aggregate==
===Dependency Injection===
===Encapsulation===
===Outside Projections using Value Objects===
===Base classes=== 
==Value Objects==
===Make explicit what is implicit===
===Increase expression power===
===JPA aspects=== 
==Factory==
===Dependency Injection Responsibility===
===Validation===
===Part of business logic (Assembling objects)===
===Increase testability=== 
==Repository==
===Dependency Injection Responsibility===
===Base Classes=== 
==Domain Services==
===Responsibility Driven Design Transformers===
===When to introduce: simple rule of the thumb=== 
==Policy==
===Supple Design===
===Decorating technique===
===Functional style===
===Injecting=== 
==Specification==
===Supple Design in Runtime 
==Events==
===Decoupling===
===Optimization===
===Plugin oriented architecture===
===Updating read model===
==Saga==
===Persistent multi-listener===
===Complex process orchestration===
===Make explicit what is implicit===