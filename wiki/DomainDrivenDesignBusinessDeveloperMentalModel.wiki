#summary Domain Driven Design - Business Developer mental model

<wiki:toc max_depth="2" />

= Technical introduction =

This document describes sample code illustrating DDD techniques. Intention is to present code form the perspective of the business model developer. So we focus on business developers' mental model without digging to deep into engine details.

Idea is that Business does not need to understand what's under the hood - he or she should rather focus on modeling and well crafted business code.

==Architecture and design visualization using "scalable map"==

Java (and any known language) does not support understanding complex code structures. Neither UML tools.

Therefore, using [http://prezi.com Prezi], we have created a "scaleable map" of both big picture (architecture) and details view (class design).

  * You can watch it [http://prezi.com/hi2dmhfej9zu/ddd-cqrs-sample-2/ here]
  * You can "play" default road trip or pan and zoom freely using mouse
  * You can click on SVN link and go straight to the code!

==Project Structure==
[http://code.google.com/p/ddd-cqrs-sample/source/browse/#svn%2Ftrunk%2Fddd_cqrs-sample SVN Repository] contains project that is structured in the standard Maven way.

===DDD common classes===
Package [http://code.google.com/p/ddd-cqrs-sample/source/browse/#svn%2Ftrunk%2Fddd_cqrs-sample%2Fsrc%2Fmain%2Fjava%2Fpl%2Fcom%2Fbottega%2Fddd pl.com.bottega.ddd] contains common DDD library (not framework).

Common DDD goodies are:
  * [http://code.google.com/p/ddd-cqrs-sample/source/browse/#svn%2Ftrunk%2Fddd_cqrs-sample%2Fsrc%2Fmain%2Fjava%2Fpl%2Fcom%2Fbottega%2Fddd%2Fapplication application]
    * annotation - annotations used in Application Layer artifacts
      * !ApplicationEvent - tagging annotation, will be used in visual tools
      * !ApplicationService - if You prefer services instead of commands and handlers. Used for tagging but also provides Spring features (this annotations is annotated by Spring annotations)
      * !ApplicationStatefullComponent - for session scoped Spring beans
  * [http://code.google.com/p/ddd-cqrs-sample/source/browse/#svn%2Ftrunk%2Fddd_cqrs-sample%2Fsrc%2Fmain%2Fjava%2Fpl%2Fcom%2Fbottega%2Fddd%2Fdomain domain]
    * annotations - annotations for all DDD Building Blocks - some of them are just for tagging (will be used by visual analyzers) but some of them are annotated by Spring's annotations that introduces Spring based features like being a Bean. All annotations will be described in details in [DomainDrivenDesignBusinessDeveloperMentalModel#Domain_Layer Domain Layer section] of this document.
    * sharedcernel - common model used in all Bounded Contexts
    * infrastructure
      * events - Events Engine impl, Common technical listeners, annotations for listeners
      * repo - JPA base repositories, that can be handfull
      * sagas - Saga Engine impl
  * [http://code.google.com/p/ddd-cqrs-sample/source/browse/#svn%2Ftrunk%2Fddd_cqrs-sample%2Fsrc%2Fmain%2Fjava%2Fpl%2Fcom%2Fbottega%2Fddd%2Fsagas sagas] - Saga API - described in later section of this document


===CqRS common classes===
Package [http://code.google.com/p/ddd-cqrs-sample/source/browse/#svn%2Ftrunk%2Fddd_cqrs-sample%2Fsrc%2Fmain%2Fjava%2Fpl%2Fcom%2Fbottega%2Fcqrs pl.com.bottega.cqrs] contains common CqRS "engine".

Common CqRS goodies are described in the [PART II] because they are just technical details.

===ERP product classes===
Package [http://code.google.com/p/ddd-cqrs-sample/source/browse/#svn%2Ftrunk%2Fddd_cqrs-sample%2Fsrc%2Fmain%2Fjava%2Fpl%2Fcom%2Fbottega%2Ferp pl.com.bottega.erp] is The Product - Enterprise Resource Planning class system.

System modules separation at this package level:
  * crm - Client Relationship Management module
  * sagas - Sagas which contains cross module features
  * sales - Sales module - *most examples are implemented in this module*
  * shipping - Shipping module

Modules are independent set of features that can  be used separately and still being valuable.

In this sample modules are equal to DDD Bounded Context.

===ERP module structure===
Open [http://code.google.com/p/ddd-cqrs-sample/source/browse/trunk/ddd_cqrs-sample/src/main/#main%2Fjava%2Fpl%2Fcom%2Fbottega%2Ferp%2Fsales Sales] module, look at packages structure and follow the description:

Each module is packaged using the same application architecture style (beginning from the top):
  # _webui_ - at the top, web client controllers
  # two separated CqRS stacks:
    * read (presentation) model
      # _presentation_ reading presentation data
    * write (business) model
      # _application_ application logic (handlers or services, listeners, statefull objects)
      # _domain_ - domain model, building blocks
      # _infrastructure_ - technical stuff, repository impl, technical listeners

===Technical resources===
Folder [http://code.google.com/p/ddd-cqrs-sample/source/browse/trunk/ddd_cqrs-sample/src/main/#main%2Fresources] contains:
  * jdbc and logger properties
  * application service level (no web app stuff) Spring configuration

Folder [http://code.google.com/p/ddd-cqrs-sample/source/browse/trunk/ddd_cqrs-sample/src/main/#main%2Fwebapp] contains web application based on Spring Web MVC. Other client implementations will be provided in the next milestone (Android, Ajax, Remoting, WebService)

==Just one Maven Artifact?==
As You can see project logically contains:
  * common DDD API
  * common DDD impl
  * common CqRS API
  * common CqRS impl
  * product modules API
  * product modules and cross module Sagas impl

All this stuff is stored in one Eclipse Project - one Maven Artifact.

This decision is a trade-off made in sake of simplicity. If You are proficient Maven user, You probably split code into separated artifacts in one hour. But those of You who are not familiar with Maven should focus on the essence of this project - sample code.



=Domain Description=
Sample is illustrated in the context of ERP system. We have chosen this domain because is relatively well known. Everybody has some intuition about Clients, Orders, Products etc. so We don't have to stuck explaining how different domain works (financial, medical etc.)

*Sales* module

==Bounded Contexts - decoupling, independent development== 
==Shared Kernel== 
=Application Architecture= 
==Layers== 
==Inversion of Control techniques: Dependency Injection, Events, Aspect Oriented Programming== 
==Design expression using Custom Annotations==  
=Application Layer= 
==Commands/Services== 
==Listeners - Bounded Context and Context Mapper== 
==Sagas== 
=Domain Layer= 
==Entity==
===Base class===
==Aggregate==
===Dependency Injection===
===Encapsulation===
===Outside Projections using Value Objects===
===JPA aspects===
===Base classes=== 
==Value Objects==
===Make explicit what is implicit===
===Increase expression power===
===JPA aspects=== 
==Factory==
===Dependency Injection Responsibility===
===Validation===
===Part of business logic (Assembling objects)===
===Increase testability=== 
==Repository==
===Dependency Injection Responsibility===
===Base Classes=== 
==Domain Services==
===Responsibility Driven Design Transformers===
===When to introduce: simple rule of the thumb=== 
==Policy==
===Supple Design===
===Decorating technique===
===Functional style===
===Injecting=== 
==Specification==
===Supple Design in Runtime 
==Events==
===Decoupling===
===Optimization===
===Plugin oriented architecture===
===Updating read model===
==Saga==
===Persistent multi-listener===
===Complex process orchestration===
===Make explicit what is implicit===