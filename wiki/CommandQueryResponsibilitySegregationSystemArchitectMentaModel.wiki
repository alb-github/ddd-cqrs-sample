#summary Command-query Responsibility Segregation - System Architect mental model
<wiki:toc max_depth="3" />
= Introduction =
This document describes sample code illustrating CqRS techniques. Intention is to present code form the perspective of the (application/system/general) architect. So we focus on architects' mental model digging deep into engine details. 

Idea is that an architect need to understand what's under the hood - he or she should feel with engine technical code like fish in the water and freely change it.

==Architecture and design visualization using Scalable Map==

Java (and any known language) does not support understanding complex code structures. Neither UML tools.

Therefore, using [http://prezi.com Prezi], we have created a "scalable map" of both big picture (architecture) and details view (class design).

  * You can watch it [http://prezi.com/hi2dmhfej9zu/ddd-cqrs-sample-2/ here]
  * You can "play" default road trip or pan and zoom freely using mouse
  * You can click on SVN link and go straight to the code!


----
----

=Portable architecture - technical independence=
Application architecture is described in [DomainDrivenDesignBusinessDeveloperMentalModel#Application_Architecture Part I: DDD - Application Architecture].

Portable architecture idea is described in [Philosophy#Portable_architecture_-_technical_independence Philosophy chapter].

Possibility to switch Spring to other container or light and simple home made solution is described in this document in section [CommandQueryResponsibilitySegregationSystemArchitectMentaModel#Run_Environment_-_leaven_for_additional_features Run Environment - leaven for additional features].

Possibility to implement own Events is described in this document in section [CommandQueryResponsibilitySegregationSystemArchitectMentaModel#Events_Engine Events Engine].

Possibility to implement own Saga is described in this document in section [CommandQueryResponsibilitySegregationSystemArchitectMentaModel#Saga_Engine Saga Engine].


----
----

=Architecture decisions= 
==Business (Write) Model== 
===Classic: Service - AOP techniques===
===Commands and handlers===
possibility to get rid of Containers
===Synergy: Commands and AOP=== 


==Presentation (Read) Model== 
===Performance problems with JPA===
  TODO
  * n+1 Select problem
  * fetching unnecessary data
  * need to encapsulate domain model (remote clients)
    * loading JPA entities and repacking to DTO is simply silly:)
===Techniques of flattening Business Model===
  TODO
  * JPA: SELECT NEW
  * Native SQL
  * materialized ViewView
  * Dedicated Model
===Optimization: First think what You query for, tan model it ===
TODO
====Dedicated model updated by Domain Events====

====Shredding====

====Clustering====

====Cloud==== 

==Event Sourcing== 
===When to Use===
  * Need to store Behavioral model and "project" it in many perspetives
  * Complex Event Processing with Artificial Neural Networks (events stream as learning vector)
  * Need to "travel in time"
===Why in this context we decided to not use it=== 
  * ERP is well described by archetypes
  * Relative small amount events per aggregate
  * Need to check model constrains - relational DB does it out of the box

----
----

=Technical aspects of implementation= 
TODO

==Command Handlers== 
===Finding Handler=== 
===Security and transactions===

 
==Server Gate== 
===Asynchronous mode=== 
===Optimization by detecting duplicates===


==Run Environment - leaven for additional features== 


==Events Engine== 
===How doest it work and why so simple:) ===
===Asynchronous Mode ===


==Saga Engine== 
===Also so simple? ===
===API ===
===Persistent Memento===