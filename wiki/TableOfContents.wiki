#summary Table of Contents

= WIKI IS UNDER CONSTRUCTION =

We are working on the suggested learning path that is meant to flatten learning curve.


=Learning Path=

  # [Introduction Introduction]
    # [Introduction#Motivation Motivation]
    # [Introduction#Pragmatic_approach Pragmatic approach]
    # [Introduction#DDD_and_CqRS_resources DDD and CqRS resources]
    # [Introduction#Modeling_resources Modeling resources]
  # [Philosophy Philosophy]
    # [Philosophy#Main_Goals Main goals]
    # [Philosophy#Leaven_idea Leaven idea]
    # [Philosophy#Noninvasive_philosophy Noninvasive philosophy]
    # [Philosophy#Portable_architecture_-_technical_independence Portable architecture - technical independence]
    # [Philosophy#You_are_the_Architect_and_owner_of_the_code You are the Architect and owner of the code]
  # [DomainDrivenDesignBusinessDeveloperMentalModel PART I: Domain Driven Design] - *Business Developer mental model*
    # [DomainDrivenDesignBusinessDeveloperMentalModel#Technical_introduction Technical introduction]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Technical_introduction Architecture and design visualization using "scaleable map"]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Project_Structure Project Structure]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Just_one_Maven_Artifact? Just one Maven Artifact?]
    # [DomainDrivenDesignBusinessDeveloperMentalModel#Domain_Description Domain Description]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Bounded_Contexts Bounded Contexts]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Shared_Kernel Shared Kernel]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#WARNING WARNING]
    # [DomainDrivenDesignBusinessDeveloperMentalModel#Application_Architecture Application Architecture]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Two_stacks_of_Layers Two stacks of Layers]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Expressing_Design_using_Custom_Annotations Expressing Design using Custom Annotations]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Inversion_of_Control_techniques Inversion of Control techniques]
    # [DomainDrivenDesignBusinessDeveloperMentalModel#Application_Layer Application Layer]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Commands/Services Commands/Services]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Application_Event Application Event]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Listeners_-_Bounded_Context_and_Context_Mapper Listeners - Bounded Context and Context Mapper]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Sagas Sagas]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Statefull_Application_Objects Statefull Application Objects]
    # [DomainDrivenDesignBusinessDeveloperMentalModel#Domain_Layer Domain Layer]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Entity Entity]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Aggregate Aggregate]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Value_Objects Value Objects]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Factory Factory]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Repository Repository]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Domain_Services Domain Services]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Policy Policy]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Specification Specification]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Events Events]
    # [DomainDrivenDesignBusinessDeveloperMentalModel#Saga Saga]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Complex_process_orchestration Complex process orchestration]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Persistent_multi-listener Persistent multi-listener]
      # [DomainDrivenDesignBusinessDeveloperMentalModel#Saga_makes_explicit_what_is_implicit Saga makes explicit what is implicit]   
  # [CommandQueryResponsibilitySegregationSystemArchitectMentaModel   Part II: Command-query Responsibility Segregation] - *System Architect mental model*
    # Portable architecture - technical independence    
    # Architecture decisions
      * Business (Write) Model
        * Classic: Service - AOP techniques
        * Commands and handlers - possibility to get rid of Containers
        * Synergy: Commands and AOP
      * Presentation (Read) Model
        * Performance problems with JPA
        * Techniques of flattening Business Model - SELECT NEW, View, Dedicated Model
        * Optimization: First think what You query for, tan model it
      * Event Sourcing
        * When to Use (Behavioral model and it's projections, Complex Event Processing and Artificial Neural Networks)
        * Why in this context we decided to not use it
    # Technical aspects of implementation
      * Command Handlers
        * Finding Handler
        * Security and transactions
      * Server Gate
        * Asynchronous mode
        * Optimization by detecting duplicates
      * Run Environment - leaven for additional features
      * Events Engine
        * How doest it work and why so simple:)
        * Asynchronous Mode
      * Saga
        * Also so simple?
        * API
        * Persistent Memento
  # PART III: Behavior Driven Development
    # Resources
    # Sample
    # Support